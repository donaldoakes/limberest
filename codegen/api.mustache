{{>licenseInfo}}
package {{package}};

{{#imports}}
import {{import}};
{{/imports}}

{{#operations}}
@Path("{{baseName}}")
@Api("{{classname}}")
public class {{classname}} extends JsonRestService {
  {{#operation}}

  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  @ApiOperation(value="{{summary}}"{{#notes}},
      notes="{{notes}}"{{/notes}}{{#returnType}},
      response={{returnBaseType}}.class{{#returnContainer}}, responseContainer="{{returnContainer}}"{{/returnContainer}}{{/returnType}})
  public Response<JSONObject> {{operationId}}(Request<JSONObject> request) throws ServiceException {
  
    {{#validateRequest}}
    Result result = new SwaggerValidator(request).validate(request, true);
    if (result.isError())
      throw new ValidationException(result);
      
    {{/validateRequest}}
    {{#bodyParam}}
    {{bodyParam.dataType}} {{bodyParam.paramName}} = new {{bodyParam.dataType}}(request.getBody());
    {{/bodyParam}}
    {{#isRestfulCreate}}
    return new Response<>({{bodyParam.paramName}}.toJson());
    {{/isRestfulCreate}}
    {{^isRestfulCreate}}
    {{#isListContainer}}
    JsonList<{{returnBaseType}}> jsonList = new JsonList<>(new ArrayList<{{returnBaseType}}>());
    return new Response<>(jsonList.toJson());
    {{/isListContainer}}
    {{#isMapContainer}}
    return new Response<>(new JSONObject());
    {{/isMapContainer}}
    {{^returnContainer}}
    return new Response<>(new {{returnBaseType}}().toJson());
    {{/returnContainer}}
    {{/isRestfulCreate}}
  }
  {{/operation}}
}
{{/operations}}
